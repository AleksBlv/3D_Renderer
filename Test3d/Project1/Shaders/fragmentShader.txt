#version 400 core

in vec2 v_texCoord; 
in vec3 surfaceNormal;
in vec3 toLightVector;
in vec3 toCameraVector;

out vec4 out_color;

uniform sampler2D textureSampler;
uniform vec3 light_color;
uniform float shineDumper;
uniform float reflectivity;

void main(void)
{
    vec3 unitNormal = normalize(surfaceNormal);
    vec3 unitLightNormal = normalize(toLightVector);

    float nDot = dot(unitNormal, unitLightNormal);
    float brightness = max(nDot, 0.0);
    vec3 diffuse = brightness * light_color;

    vec3 unitVectorToCamera = normalize(toCameraVector);
    vec3 lightDirection = -unitLightNormal;
    vec3 reflectedLightDirection = reflect(lightDirection, unitNormal);
    float specularFactor = dot(reflectedLightDirection, unitVectorToCamera);
    specularFactor = max(specularFactor, 0.0);
    float dumperFactor = pow(specularFactor, shineDumper);
    vec3 finalSpecular = dumperFactor * reflectivity *   light_color;

    out_color =vec4(diffuse, 1.0) * texture(textureSampler, v_texCoord) + vec4(finalSpecular, 1.0);
} 